# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
---
version: 2.1

commands:
  authenticate-gcp:
    steps:
      - run:
          name: Create auth configuration files
          command: |
            GCP_SERVICE_ACCOUNT_EMAIL="${GCP_SERVICE_ACCOUNT_ID}@${GCP_PROJECT_ID}.iam.gserviceaccount.com"
            GCP_OIDC_AUDIENCE="projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL_ID}/providers/${GCP_OIDC_PROVIDER_ID}"

            mkdir -p ~/.config/gcloud
            echo "${CIRCLE_OIDC_TOKEN}" > $HOME/.config/gcloud/oidc_access_token

            gcloud iam workload-identity-pools create-cred-config \
              "${GCP_OIDC_AUDIENCE}" \
              --service-account="${GCP_SERVICE_ACCOUNT_EMAIL}" \
              --output-file="$HOME/.config/gcloud/application_default_credentials.json" \
              --credential-source-file="$HOME/.config/gcloud/oidc_access_token" \
              --credential-source-type=text
      - run:
          name: Show the files before auth
          command: |
            cat $HOME/.config/gcloud/application_default_credentials.json
            cat $HOME/.config/gcloud/oidc_access_token
      - run:
          name: Try authenticating with creds
          command: |
            gcloud auth login \
              --verbosity debug \
              --cred-file "$HOME/.config/gcloud/application_default_credentials.json"
      - run:
          name: Set GCP project
          command: gcloud config set project "$GCP_PROJECT_ID"
  deploy-service:
    parameters:
      cloud-run-instance:
        type: string
        default: ${CIRCLE_PROJECT_REPONAME}
    steps:
      - run:
          name: Check if Cloud Run service exists
          command: |
            gcloud run services describe \
              <<parameters.cloud-run-instance>> \
              --region="${GCP_AR_REGION}" > /dev/null
            if [ $? -eq 0 ]; then
              echo "Cloud Run service <<parameters.cloud-run-instance>> exists"
            else
              echo "Cloud Run service <<parameters.cloud-run-instance>> does not exist"
              circleci-agent step halt
            fi
      - run:
          name: Update the Cloud Run with new image
          command: |
            gcloud run services update \
              <<parameters.cloud-run-instance>> \
              --image="${GCP_AR_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_AR_REPO}/${CIRCLE_PROJECT_REPONAME}:latest" \
              --region="${GCP_AR_REGION}"

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
      - run:
          name: "Create Docker Buildx builder"
          command: |
            docker buildx create \
              --name container \
              --driver=docker-container \
              --use --bootstrap
      - run:
          name: "Build Docker builder image"
          command: |
            docker buildx build \
              -t ${CIRCLE_PROJECT_REPONAME}:builder \
              --load --target builder .
      - run:
          name: "Build Docker runtime image"
          command: |
            mkdir -p images
            docker buildx build \
              -t ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} \
              --target builder \
              -o type=tar,dest=images/${CIRCLE_PROJECT_REPONAME}_${CIRCLE_SHA1} .
      - persist_to_workspace:
          root: .
          paths:
            - images
  push:
    docker:
      - image: cimg/gcp:2024.03
    steps:
      - authenticate-gcp
      - run:
          name: Set up Docker auth
          command: gcloud auth configure-docker "${GCP_AR_REGION}-docker.pkg.dev"
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Load image
          command: |
            docker image load < "images/${CIRCLE_PROJECT_REPONAME}_${CIRCLE_SHA1}"
      - run:
          name: Tag image for Artifact Registry
          command: docker tag "${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" "${GCP_AR_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_AR_REPO}/${CIRCLE_PROJECT_REPONAME}"
      - run:
          name: Push image for Artifact Registry
          command: docker push "${GCP_AR_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_AR_REPO}/${CIRCLE_PROJECT_REPONAME}"
  deploy-prod:
    docker:
      - image: cimg/gcp:2024.03
    steps:
      - authenticate-gcp
      - deploy-service
  deploy-staging:
    docker:
      - image: cimg/gcp:2024.03
    steps:
      - authenticate-gcp
      - deploy-service:
          cloud-run-instance: "${CIRCLE_PROJECT_REPONAME}-staging"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-deploy:
    jobs:
      - build
      - push:
          requires:
            - build
      - deploy-prod:
          requires:
            - push
          filters:
            branches:
              only: /main/
      - deploy-staging:
          requires:
            - push
          filters:
            branches:
              ignore: /main/
